import PDFDocument from 'pdfkit'

/**
 * Generate a simple PDF for the finalized agreement.
 * @param {object} disagreement - Disagreement document (may be partially populated)
 * @param {string} finalText - The finalized agreement text
 * @returns {Promise<Buffer>} PDF buffer
 */
export const generateAgreementPDF = async (disagreement, finalText) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ size: 'LETTER', margin: 50 })
      const chunks = []
      doc.on('data', (c) => chunks.push(c))
      doc.on('end', () => resolve(Buffer.concat(chunks)))
      doc.on('error', (err) => reject(err))

      // Header
      doc
        .fontSize(20)
        .fillColor('#111111')
        .text('Disagreement.AI Final Agreement', { align: 'center' })
      doc.moveDown(1)

      // Meta
      const caseId = disagreement?.caseId || String(disagreement?._id || '')
      const title = disagreement?.title || 'Untitled Disagreement'
      doc.fontSize(11).fillColor('#333333')
      doc.text(`Case: ${caseId}`)
      doc.text(`Title: ${title}`)
      if (disagreement?.archivedAt) {
        const dt = new Date(disagreement.archivedAt)
        doc.text(`Finalized: ${dt.toUTCString()}`)
      }
      doc.moveDown(1)

      // Body
      doc.fontSize(14).fillColor('#000000').text('Agreement', { underline: true })
      doc.moveDown(0.5)
      doc.fontSize(12).fillColor('#111111').text(finalText || '(No agreement text provided)')

      // Footer
      doc.moveDown(2)
      doc.fontSize(9).fillColor('#666666').text('Generated by Disagreement.AI', { align: 'center' })

      doc.end()
    } catch (e) {
      reject(e)
    }
  })
}

export default { generateAgreementPDF }
